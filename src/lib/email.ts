
const SENDGRID_API_KEY = process.env.SENDGRID_API_KEY;
const ADMIN_EMAIL = process.env.ADMIN_EMAIL;

export interface EmailData {
  id: string;
  name: string;
  phone: string;
  email?: string;
  service: string;
  area: number;
  roomType: string;
  address: string;
  preferredDate: string;
  preferredTime: string;
  comments?: string;
  createdAt: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –≤ Airtable
async function sendToAirtable(orderData: EmailData) {
  const AIRTABLE_TOKEN = process.env.AIRTABLE_TOKEN;
  const AIRTABLE_BASE_ID = process.env.AIRTABLE_BASE_ID;
  const AIRTABLE_TABLE_ID = process.env.AIRTABLE_TABLE_ID;

  const url = `https://api.airtable.com/v0/${AIRTABLE_BASE_ID}/${AIRTABLE_TABLE_ID}`;
  const fields = {
    '–ò–º—è': orderData.name,
    '–¢–µ–ª–µ—Ñ–æ–Ω': orderData.phone,
    'Email': orderData.email || '',
    '–¢–∏–ø –ø–æ—Ç–æ–ª–∫–∞': orderData.service,
    '–ü–ª–æ—â–∞–¥—å': orderData.area,
    '–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è': orderData.roomType,
    '–ê–¥—Ä–µ—Å': orderData.address,
    '–î–∞—Ç–∞': orderData.preferredDate,
    '–í—Ä–µ–º—è': orderData.preferredTime,
    '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': orderData.comments || '',
    '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': orderData.createdAt,
    'ID –∑–∞—è–≤–∫–∏': orderData.id
  };
  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${AIRTABLE_TOKEN}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ records: [{ fields }] }),
    });
    if (!response.ok) {
      const text = await response.text();
      throw new Error(`Airtable API error: ${response.status} ${text}`);
    }
    console.log('üü¶ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ Airtable');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Airtable:', error);
    return false;
  }
}

export async function sendMeasurementEmail(orderData: EmailData) {
  // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É –≤ Airtable
  await sendToAirtable(orderData);
  const html = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #2563eb;">üéØ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∑–∞–º–µ—Ä –ø–æ—Ç–æ–ª–∫–∞</h2>
        <div style="background: #f8fafc; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="color: #1e40af; margin-top: 0;">üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ</h3>
          <p><strong>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</strong> #${orderData.id}</p>
          <p><strong>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong> ${new Date(orderData.createdAt).toLocaleString('ru-RU')}</p>
        </div>
        <div style="background: #f0f9ff; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="color: #1e40af; margin-top: 0;">üë§ –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</h3>
          <p><strong>–ò–º—è:</strong> ${orderData.name}</p>
          <p><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> <a href="tel:${orderData.phone}">${orderData.phone}</a></p>
          ${orderData.email ? `<p><strong>Email:</strong> <a href="mailto:${orderData.email}">${orderData.email}</a></p>` : ''}
        </div>
        <div style="background: #f0fdf4; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="color: #1e40af; margin-top: 0;">üè† –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞</h3>
          <p><strong>–¢–∏–ø –ø–æ—Ç–æ–ª–∫–∞:</strong> ${orderData.service}</p>
          <p><strong>–ü—Ä–∏–º–µ—Ä–Ω–∞—è –ø–ª–æ—â–∞–¥—å:</strong> ${orderData.area} –º¬≤</p>
          <p><strong>–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è:</strong> ${orderData.roomType}</p>
        </div>
        <div style="background: #fef3c7; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="color: #1e40af; margin-top: 0;">üìÖ –í—Ä–µ–º—è –∑–∞–º–µ—Ä–∞</h3>
          <p><strong>–ê–¥—Ä–µ—Å:</strong> ${orderData.address}</p>
          <p><strong>–î–∞—Ç–∞:</strong> ${orderData.preferredDate}</p>
          <p><strong>–í—Ä–µ–º—è:</strong> ${orderData.preferredTime}</p>
        </div>
        ${orderData.comments ? `
        <div style="background: #f3e8ff; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="color: #1e40af; margin-top: 0;">üí¨ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
          <p>${orderData.comments}</p>
        </div>
        ` : ''}
        <div style="background: #fee2e2; padding: 20px; border-radius: 8px; margin: 20px 0; text-align: center;">
          <h3 style="color: #dc2626; margin-top: 0;">üö® –°–†–û–ß–ù–û!</h3>
          <p style="font-size: 18px; font-weight: bold;">–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–º–µ—Ä–∞!</p>
        </div>
        <div style="text-align: center; margin-top: 30px; color: #6b7280;">
          <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ potolkivip-rnd.ru</p>
        </div>
      </div>
    `;

  const url = 'https://api.sendgrid.com/v3/mail/send';
  const data = {
    personalizations: [
      {
        to: [{ email: ADMIN_EMAIL || 'admin@potolkivip-rnd.ru' }],
        subject: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–º–µ—Ä #${orderData.id}`,
      },
    ],
    from: { email: ADMIN_EMAIL || 'admin@potolkivip-rnd.ru', name: '–ó–∞—è–≤–∫–∏ —Å —Å–∞–π—Ç–∞' },
    content: [
      {
        type: 'text/html',
        value: html,
      },
    ],
  };

  try {
    const response = await fetch(url, {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${SENDGRID_API_KEY}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    });
    if (!response.ok) {
      const text = await response.text();
      throw new Error(`SendGrid API error: ${response.status} ${text}`);
    }
    console.log('üìß Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ SendGrid API –Ω–∞:', ADMIN_EMAIL);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email —á–µ—Ä–µ–∑ SendGrid API:', error);
    return false;
  }
}

