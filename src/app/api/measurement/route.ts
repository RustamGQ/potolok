import { NextRequest, NextResponse } from 'next/server';
import { sendMeasurementEmail } from '../../../lib/email';

interface MeasurementOrderData {
  id: string;
  name: string;
  phone: string;
  address: string;
  preferredDate: string;
  preferredTime: string;
  service: string;
  area: number;
  createdAt: string;
  status?: string;
  type?: string;
  roomType: string;
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    console.log('–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–º–µ—Ä:', body);
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!body.name || !body.phone || !body.address || !body.preferredDate || !body.preferredTime) {
      console.log('–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: –Ω–µ –≤—Å–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã');
      return NextResponse.json(
        { error: '–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã' },
        { status: 400 }
      );
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞—è–≤–∫–∏
    const orderData: MeasurementOrderData = {
      id: Math.random().toString(36).substr(2, 9).toUpperCase(),
      ...body,
      createdAt: new Date().toISOString(),
      status: 'new',
      type: 'measurement'
    };

    console.log('–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–º–µ—Ä:', orderData);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω (–∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS —Å–µ—Ä–≤–∏—Å–æ–º)
    await sendSMSNotification(orderData);
    
    // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–∞ email (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
    try {
      const emailSent = await sendMeasurementEmail(orderData);
      if (!emailSent) {
        console.log('‚ö†Ô∏è Email –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –∑–∞—è–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
      }
    } catch (emailError) {
      console.log('‚ö†Ô∏è Email –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞:', emailError);
    }

    return NextResponse.json({
      success: true,
      orderId: orderData.id,
      message: '–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–º–µ—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞'
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –∑–∞–º–µ—Ä:', error);
    return NextResponse.json(
      { error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
      { status: 500 }
    );
  }
}

async function sendSMSNotification(orderData: MeasurementOrderData) {
  // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS —Å–µ—Ä–≤–∏—Å–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, SMS.ru, Twilio)
  console.log('üì± SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:', {
    to: '+79895234952', // –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    message: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–º–µ—Ä #${orderData.id}
–ò–º—è: ${orderData.name}
–¢–µ–ª–µ—Ñ–æ–Ω: ${orderData.phone}
–ê–¥—Ä–µ—Å: ${orderData.address}
–î–∞—Ç–∞: ${orderData.preferredDate} ${orderData.preferredTime}
–¢–∏–ø –ø–æ—Ç–æ–ª–∫–∞: ${orderData.service}
–ü–ª–æ—â–∞–¥—å: ${orderData.area} –º¬≤`
  });
}


